import sys

def param_card_default():
    card = "###################################################################### \n "\
"## PARAM_CARD AUTOMATICALY GENERATED BY MG5 FOLLOWING UFO MODEL   #### \n "\
"###################################################################### \n "\
"##                                                                  ## \n "\
"##  Width set on Auto will be computed following the information    ## \n "\
"##        present in the decay.py files of the model.               ## \n "\
"##        See  arXiv:1402.1178 for more details.                    ## \n "\
"##                                                                  ## \n "\
"###################################################################### \n "\
" \n "\
"################################### \n "\
"## INFORMATION FOR CKMBLOCK \n "\
"################################### \n "\
"Block ckmblock \n "\
"    1 2.277360e-01 # cabi \n "\
" \n "\
"################################### \n "\
"## INFORMATION FOR FRBLOCK \n "\
"################################### \n "\
"Block frblock \n "\
"    1 1.000000e-02 # gZpuV \n "\
"    2 0.000000e+00 # gZpuA \n "\
"    3 1.000000e-02 # gZpcV \n "\
"    4 0.000000e+00 # gZpcA \n "\
"    5 1.000000e-02 # gZptV \n "\
"    6 0.000000e+00 # gZptA \n "\
"    7 1.000000e-02 # gZpdV \n "\
"    8 0.000000e+00 # gZpdA \n "\
"    9 1.000000e-02 # gZpsV \n "\
"   10 0.000000e+00 # gZpsA \n "\
"   11 1.000000e-02 # gZpbV \n "\
"   12 0.000000e+00 # gZpbA \n "\
"   13 1.000000e-02 # gS2 \n "\
"   14 1.000000e+09 # LambdaSgam \n "\
"   15 1.000000e-02 # gX2ZpV \n "\
"   16 0.000000e+00 # gX2ZpA \n "\
"   17 1.000000e-02 # gX3ZpV \n "\
"   18 0.000000e+00 # gX3ZpA \n "\
"   19 1.000000e+05 # LambdaXgam \n "\
"   20 1.000000e+05 # LambdaXe \n "\
"   21 1.000000e+09 # LambdaXmu \n "\
"   22 1.000000e+09 # LambdaXta \n "\
"   23 1.000000e-02 # gSu \n "\
"   24 1.000000e-06 # gSc \n "\
"   25 1.000000e-06 # gSt \n "\
"   26 1.000000e-02 # gSd \n "\
"   27 1.000000e-06 # gSs \n "\
"   28 1.000000e-06 # gSb \n "\
"   29 1.000000e-02 # gSe \n "\
"   30 1.000000e-06 # gSmu \n "\
"   31 1.000000e-06 # gSta \n "\
"   32 1.000000e-02 # gS1X \n "\
"   33 1.000000e-02 # gS2X \n "\
"   34 1.000000e-02 # gS12 \n "\
"   35 1.000000e-02 # gX12ZpV \n "\
"   36 0.000000e+00 # gX12ZpA \n "\
" \n "\
"################################### \n "\
"## INFORMATION FOR MASS \n "\
"################################### \n "\
"Block mass \n "\
"    1 5.040000e-03 # MD \n "\
"    2 2.550000e-03 # MU \n "\
"    3 1.010000e-01 # MS \n "\
"    4 1.270000e+00 # MC \n "\
"    5 4.700000e+00 # MB \n "\
"    6 1.720000e+02 # MT \n "\
"   11 5.110000e-04 # Me \n "\
"   13 1.056600e-01 # MMU \n "\
"   15 1.777000e+00 # MTA \n "\
"   23 9.118760e+01 # MZ \n "\
"   25 1.250000e+02 # MH \n "\
"   52 1.000000e+02 # MX1 \n "\
"   53 1.100000e+02 # MX2 \n "\
"   54 1.200000e+02 # MX3 \n "\
"   57 1.000000e+02 # MS1 \n "\
"   58 1.100000e+02 # MS2 \n "\
"   61 1.500000e+03 # MZp \n "\
"## Dependent parameters, given by model restrictions. \n "\
"## Those values should be edited following the \n "\
"## analytical expression. MG5 ignores those values \n "\
"## but they are important for interfacing the output of MG5 \n "\
"## to external program such as Pythia. \n "\
"  12 0.000000 # ve : 0.0 \n "\
"  14 0.000000 # vm : 0.0 \n "\
"  16 0.000000 # vt : 0.0 \n "\
"  21 0.000000 # g : 0.0 \n "\
"  22 0.000000 # a : 0.0 \n "\
"  24 79.824360 # w+ : cmath.sqrt(MZ__exp__2/2. + cmath.sqrt(MZ__exp__4/4. - (aEW*cmath.pi*MZ__exp__2)/(Gf*sqrt__2))) \n "\
" \n "\
"################################### \n "\
"## INFORMATION FOR SMINPUTS \n "\
"################################### \n "\
"Block sminputs \n "\
"    1 1.279000e+02 # aEWM1 \n "\
"    2 1.166370e-05 # Gf \n "\
"    3 1.184000e-01 # aS \n "\
" \n "\
"################################### \n "\
"## INFORMATION FOR YUKAWA \n "\
"################################### \n "\
"Block yukawa \n "\
"    1 5.040000e-03 # ymdo \n "\
"    2 2.550000e-03 # ymup \n "\
"    3 1.010000e-01 # yms \n "\
"    4 1.270000e+00 # ymc \n "\
"    5 4.700000e+00 # ymb \n "\
"    6 1.720000e+02 # ymt \n "\
"   11 5.110000e-04 # yme \n "\
"   13 1.056600e-01 # ymm \n "\
"   15 1.777000e+00 # ymtau \n "\
" \n "\
"################################### \n "\
"## INFORMATION FOR DECAY \n "\
"################################### \n "\
"DECAY   6 1.508336e+00 # WT \n "\
"DECAY  23 2.495200e+00 # WZ \n "\
"DECAY  24 2.085000e+00 # WW \n "\
"DECAY  25 4.070000e-03 # WH \n "\
"DECAY  52 0.000000e+00 # WX1 \n "\
"DECAY  53 auto # WX2 \n "\
"DECAY  54 auto # WX3 \n "\
"DECAY  57 0.000000e+00 # WS1 \n "\
"DECAY  58 auto # WS2 \n "\
"DECAY  61 auto # WZp \n "\
"## Dependent parameters, given by model restrictions. \n "\
"## Those values should be edited following the \n "\
"## analytical expression. MG5 ignores those values \n "\
"## but they are important for interfacing the output of MG5 \n "\
"## to external program such as Pythia. \n "\
"DECAY  1 0.000000 # d : 0.0 \n "\
"DECAY  2 0.000000 # u : 0.0 \n "\
"DECAY  3 0.000000 # s : 0.0 \n "\
"DECAY  4 0.000000 # c : 0.0 \n "\
"DECAY  5 0.000000 # b : 0.0 \n "\
"DECAY  11 0.000000 # e- : 0.0 \n "\
"DECAY  12 0.000000 # ve : 0.0 \n "\
"DECAY  13 0.000000 # mu- : 0.0 \n "\
"DECAY  14 0.000000 # vm : 0.0 \n "\
"DECAY  15 0.000000 # ta- : 0.0 \n "\
"DECAY  16 0.000000 # vt : 0.0 \n "\
"DECAY  21 0.000000 # g : 0.0 \n "\
"DECAY  22 0.000000 # a : 0.0 \n "\
"#=========================================================== \n "\
"# QUANTUM NUMBERS OF NEW STATE(S) (NON SM PDG CODE) \n "\
"#=========================================================== \n "\
" \n "\
"Block QNUMBERS 52  # x1 \n "\
"        1 0  # 3 times electric charge \n "\
"        2 2  # number of spin states (2S+1) \n "\
"        3 1  # colour rep (1: singlet, 3: triplet, 8: octet) \n "\
"        4 1  # Particle/Antiparticle distinction (0=own anti) \n "\
"Block QNUMBERS 53  # x2 \n "\
"        1 0  # 3 times electric charge \n "\
"        2 2  # number of spin states (2S+1) \n "\
"        3 1  # colour rep (1: singlet, 3: triplet, 8: octet) \n "\
"        4 1  # Particle/Antiparticle distinction (0=own anti) \n "\
"Block QNUMBERS 54  # x3 \n "\
"        1 0  # 3 times electric charge \n "\
"        2 2  # number of spin states (2S+1) \n "\
"        3 1  # colour rep (1: singlet, 3: triplet, 8: octet) \n "\
"        4 1  # Particle/Antiparticle distinction (0=own anti) \n "\
"Block QNUMBERS 61  # zp \n "\
"        1 0  # 3 times electric charge \n "\
"        2 3  # number of spin states (2S+1) \n "\
"        3 1  # colour rep (1: singlet, 3: triplet, 8: octet) \n "\
"        4 0  # Particle/Antiparticle distinction (0=own anti) \n "\
"Block QNUMBERS 57  # s1 \n "\
"        1 0  # 3 times electric charge \n "\
"        2 1  # number of spin states (2S+1) \n "\
"        3 1  # colour rep (1: singlet, 3: triplet, 8: octet) \n "\
"        4 1  # Particle/Antiparticle distinction (0=own anti) \n "\
"Block QNUMBERS 58  # s2 \n "\
"        1 0  # 3 times electric charge \n "\
"        2 1  # number of spin states (2S+1) \n "\
"        3 1  # colour rep (1: singlet, 3: triplet, 8: octet) \n "\
"        4 1  # Particle/Antiparticle distinction (0=own anti)"
    return card

def proc_card_default():
    card ="#************************************************************ \n"\
"#*                     MadGraph5_aMC@NLO                    * \n"\
"#*                                                          * \n"\
"#*                *                       *                 * \n"\
"#*                  *        * *        *                   * \n"\
"#*                    * * * * 5 * * * *                     * \n"\
"#*                  *        * *        *                   * \n"\
"#*                *                       *                 * \n"\
"#*                                                          * \n"\
"#*                                                          * \n"\
"#*         VERSION 2.6.0                 2017-08-16         * \n"\
"#*                                                          * \n"\
"#*    The MadGraph5_aMC@NLO Development Team - Find us at   * \n"\
"#*    https://server06.fynu.ucl.ac.be/projects/madgraph     * \n"\
"#*                                                          * \n"\
"#************************************************************ \n"\
"#*                                                          * \n"\
"#*               Command File for MadGraph5_aMC@NLO         * \n"\
"#*                                                          * \n"\
"#*     run as ./bin/mg5_aMC  filename                       * \n"\
"#*                                                          * \n"\
"#************************************************************ \n"\
"set group_subprocesses Auto \n"\
"set ignore_six_quark_processes False \n"\
"set loop_optimized_output True \n"\
"set loop_color_flows False \n"\
"set gauge unitary \n"\
"set complex_mass_scheme False \n"\
"set max_npoint_for_channel 0 \n"\
"import model sm \n"\
"define p = g u c d s u~ c~ d~ s~ \n"\
"define j = g u c d s u~ c~ d~ s~ \n"\
"define l+ = e+ mu+ \n"\
"define l- = e- mu- \n"\
"define vl = ve vm vt \n"\
"define vl~ = ve~ vm~ vt~ \n"\
"import model Zp_LLP \n"
    return card

def madspin_card_default():
    card = "#************************************************************ \n"\
"#*                        MadSpin                           * \n"\
"#*                                                          * \n"\
"#*    P. Artoisenet, R. Frederix, R. Rietkerk, O. Mattelaer * \n"\
"#*                                                          * \n"\
"#*    Part of the MadGraph5_aMC@NLO Framework:              * \n"\
"#*    The MadGraph5_aMC@NLO Development Team - Find us at   * \n"\
"#*    https://server06.fynu.ucl.ac.be/projects/madgraph     * \n"\
"#*                                                          * \n"\
"#*    Manual:                                               * \n"\
"#*    cp3.irmp.ucl.ac.be/projects/madgraph/wiki/MadSpin     * \n"\
"#*                                                          * \n"\
"#************************************************************ \n"\
"#Some options (uncomment to apply) \n"\
"# \n"\
"# set seed 1 \n"\
"# set Nevents_for_max_weigth 75 # number of events for the estimate of the max. weight \n"\
"# set BW_cut 15                 # cut on how far the particle can be off-shell \n"\
"# set spinmode onshell          # Use one of the madspin special mode \n"\
"set max_weight_ps_point 400  # number of PS to estimate the maximum for each event \n"\
" \n"\
"# specify the decay for the final state particles \n"
    return card


def param_card(process,choice):
    import numpy as np
    def_card = param_card_default()
    data = []
    k = 0
    while (k<len(def_card.splitlines())):
        data.append(str(def_card.splitlines()[k]) + '\n')
        k = k + 1
    k = 0
    with open('param_card.dat','w') as f:
        while (k<len(data)):
            #couplings always needed
            if '12 0.000000e+00 # gZpbA' in data[k]:
                f.write('    12 0.000000e+00 # gZpbA\n')
                couplings = []
                k = k + 1
                while '  \n' not in data[k]:
                    couplings.append(data[k])
                    k = k + 1
                #couplings relevant for the process
                new_lines = decay_prod(process,choice) #take relevant couplings from the function below
                new_lines = np.sort(new_lines,axis=0)
                j = 0
                while (j<len(new_lines)):
                    f.write('  ' + new_lines[j])
                    j = j + 1
                f.write('\n')
                f.write('###################################\n')
                f.write('\n')
                #couplings irrelevant for the process
                f.write('###################################\n')
                f.write('## NOT USED FOR THIS PROCESS \n')
                f.write('###################################\n')
                zero_coup = np.setdiff1d([couplings[i].split()[3] for i in range(0,len(couplings))],[new_lines[i].split()[3] for i in range(0,len(new_lines))]) #take only couplings which are not relevant (discriminating by the name)
                zero_coup_lines = []
                for i in range(0,len(zero_coup)):
                    j = 0
                    #set irrelevant couplings to 0 (or to 1e20 if effective scale Lambda)
                    while (j<len(couplings)):
                        if zero_coup[i] == couplings[j].split()[3]:
                            if 'Lambda' not in couplings[j]:
                                zero_coup_lines.append('    ' + couplings[j].split()[0] + ' 0.000000e+00 ' + couplings[j].split()[2] + ' ' + couplings[j].split()[3] + '\n')
                            else:
                                zero_coup_lines.append('    ' + couplings[j].split()[0] + ' 1.000000e+20 ' + couplings[j].split()[2] + ' ' + couplings[j].split()[3] + '\n')
                        j = j + 1
                zero_coup_lines = np.sort(zero_coup_lines,axis=0)
                for i in range(0,len(zero_coup_lines)):
                    f.write(zero_coup_lines[i])
                f.write('\n')
            else:
                f.write(data[k])
            k = k + 1

def proc_card(process,choice):
    def_card = proc_card_default()
    if choice == '1':
        if ('> s2' in process) or ('> s2~' in process):
            card_name = 'proc_card_s1s2.dat'
            out_name = 'Zp_s2s1'
        elif ('> x2' in process) or ('> x2~' in process):
            card_name = 'proc_card_x1x2.dat'
            out_name = 'Zp_x2x1'
    elif choice == '2':
        if '> s2' in process:
            card_name = 'proc_card_s2s2.dat'
            out_name = 'Zp_s2s2'
        elif '> x2' in process:
            card_name = 'proc_card_x2x2.dat'
            out_name = 'Zp_x2x2'
    elif choice == '3':
        if '> s2' in process:
            card_name = 'proc_card_s2s2x1x1.dat'
            out_name = 'Zp_s2s2x1x1'
        elif '> x2' in process:
            card_name = 'proc_card_x2x2s1s1.dat'
            out_name = 'Zp_x2x2s1s1'
    with open(card_name,'w') as f:
        k = 0
        while (k < len(def_card.splitlines())):
            f.write(def_card.splitlines()[k])
            f.write('\n')
            k += 1
        f.write('generate ' + process.split(',')[0] + '\n')
        f.write('output proc_' + out_name + '\n')
        f.write('launch\n')
        f.write('set time_of_flight 0.\n')
        f.write('set WX2 auto\n')
        f.write('set WX3 auto\n')
        f.write('set WS2 auto\n')
        f.write('set WZp auto')
    f.close()
    return card_name, out_name

def madspin_card(process,decay):
    def_card = madspin_card_default()
    if ('s2 >' in process) or ('s2~ >' in process):
        x2_check = 0
        if 'u' in decay:
            dec = ['s2 > u u~', 's2~ > u u~']
            card_name = 'madspin_card_uu.dat'
        elif 'c' in decay:
            dec = ['s2 > c c~', 's2~ > c c~']
            card_name = 'madspin_card_cc.dat'
        elif 't' in decay:
            dec = ['s2 > t t~', 's2~ > t t~']
            card_name = 'madspin_card_tt.dat'
        elif 'd' in decay:
            dec = ['s2 > d d~', 's2~ > d d~']
            card_name = 'madspin_card_dd.dat'
        elif 's' in decay:
            dec = ['s2 > s s~', 's2~ > s s~']
            card_name = 'madspin_card_ss.dat'
        elif 'b' in decay:
            dec = ['s2 > b b~', 's2~ > b b~']
            card_name = 'madspin_card_bb.dat'
        elif 'j' in decay:
            dec = ['s2 > j j', 's2~ > j j']
            card_name = 'madspin_card_jj.dat'
        elif 'e' in decay:
            dec = ['s2 > e- e+', 's2~ > e- e+']
            card_name = 'madspin_card_ee.dat'
        elif 'mu' in decay:
            dec = ['s2 > mu- mu+', 's2~ > mu- mu+']
            card_name = 'madspin_card_mumu.dat'
        elif 'ta' in decay:
            dec = ['s2 > ta- ta+', 's2~ > ta- ta+']
            card_name = 'madspin_card_tata.dat'
        elif 'a' in decay:
            dec = ['s2 > a a', 's2~ > a a']
            card_name = 'madspin_card_aa.dat'
    elif ('x2 >' in process) or ('x2~ >' in process):
        x2_check = 1
        if 'u' in decay:
            dec = ['x2 > x1 u u~', 'x2~ > x1~ u u~']
            card_name = 'madspin_card_uu_MET.dat'
        elif 'c' in decay:
            dec = ['x2 > x1 c c~', 'x2~ > x1~ c c~']
            card_name = 'madspin_card_cc_MET.dat'
        elif 't' in decay:
            dec = ['x2 > x1 t t~', 'x2~ > x1~ t t~']
            card_name = 'madspin_card_tt_MET.dat'
        elif 'd' in decay:
            dec = ['x2 > x1 d d~', 'x2~ > x1~ d d~']
            card_name = 'madspin_card_dd_MET.dat'
        elif 's' in decay:
            dec = ['x2 > x1 s s~', 'x2~ > x1~ s s~']
            card_name = 'madspin_card_ss_MET.dat'
        elif 'b' in decay:
            dec = ['x2 > x1 b b~', 'x2~ > x1~ b b~']
            card_name = 'madspin_card_bb_MET.dat'
        elif 'j' in decay:
            dec = ['x2 > x1 j j', 'x2~ > x1~ j j']
            card_name = 'madspin_card_jj_MET.dat'
        elif 'e' in decay:
            dec = ['x2 > x1 e- e+', 'x2~ > x1~ e- e+']
            card_name = 'madspin_card_ee_MET.dat'
        elif 'mu' in decay:
            dec = ['x2 > x1 mu- mu+', 'x2~ > x1~ mu- mu+']
            card_name = 'madspin_card_mumu_MET.dat'
        elif 'ta' in decay:
            dec = ['x2 > x1 ta- ta+', 'x2~ > x1~ ta- ta+']
            card_name = 'madspin_card_tata_MET.dat'
        elif 'a' in decay:
            dec = ['x2 > x1 a a', 'x2~ > x1~ a a']
            card_name = 'madspin_card_aa_MET.dat'
    with open(card_name,'w') as f:
        k = 0
        while (k < len(def_card.splitlines())):
            f.write(def_card.splitlines()[k])
            f.write('\n')
            k += 1
        if x2_check == 1:
            f.write('set spinmode onshell ' + '\n')
        f.write('decay ' + dec[0] + '\n')
        f.write('decay ' + dec[1] + '\n')
        f.write('# running the actual code' + '\n')
        f.write('launch')
    f.close()
    return card_name

def decay_prod(process,choice):
    if 's2 > j' in process or ('s2 >' in process and 'j /' in process):
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  29 1.000000e-02 # gSu \n','  30 1.000000e-02 # gSc\n','  31 1.000000e-02 # gSt\n','  32 1.000000e-02 # gSd\n','  33 1.000000e-02 # gSs\n','  34 1.000000e-02 # gSb\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  29 1.000000e-02 # gSu \n','  30 1.000000e-02 # gSc\n','  31 1.000000e-02 # gSt\n','  32 1.000000e-02 # gSd\n','  33 1.000000e-02 # gSs\n','  34 1.000000e-02 # gSb\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  29 1.000000e-02 # gSu \n','  30 1.000000e-02 # gSc\n','  31 1.000000e-02 # gSt\n','  32 1.000000e-02 # gSd\n','  33 1.000000e-02 # gSs\n','  34 1.000000e-02 # gSb\n']
    elif 's2 >' in process and 'u' in process and 'u~' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  29 1.000000e-02 # gSu \n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  29 1.000000e-02 # gSu \n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  29 1.000000e-02 # gSu \n']
    elif 's2 >' in process and 'c' in process and 'c~' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  30 1.000000e-02 # gSc\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  30 1.000000e-02 # gSc\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  30 1.000000e-02 # gSc\n']
    elif 's2 >' in process and 't' in process and 't~' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  31 1.000000e-02 # gSt\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  31 1.000000e-02 # gSt\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  31 1.000000e-02 # gSt\n']
    elif 's2 >' in process and 'd' in process and 'd~' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  32 1.000000e-02 # gSd\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  32 1.000000e-02 # gSd\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  32 1.000000e-02 # gSd\n']
    elif 's2 >' in process and 's' in process and 's~' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  33 1.000000e-02 # gSs\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  33 1.000000e-02 # gSs\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  33 1.000000e-02 # gSs\n']
    elif 's2 >' in process and 'b' in process and 'b~' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  34 1.000000e-02 # gSb\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  34 1.000000e-02 # gSb\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  34 1.000000e-02 # gSb\n']
    elif 's2 >' in process and 'e-' in process  and 'e+' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  35 1.000000e-02 # gSe\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  35 1.000000e-02 # gSe\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  35 1.000000e-02 # gSe\n']
    elif 's2 >' in process and 'mu-' in process  and 'mu+' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  36 1.000000e-02 # gSmu\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  36 1.000000e-02 # gSmu\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  36 1.000000e-02 # gSmu\n']
    elif 's2 >' in process and 'ta-' in process  and 'ta+' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  37 1.000000e-02 # gSta\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  37 1.000000e-02 # gSta\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  37 1.000000e-02 # gSta\n']
    elif 's2 >' in process and 'a' in process:
        if choice == '1':
            lines = ['  40 1.000000e-02 # gS12 \n','  14 1.000000e+05 # LambdaSgam\n']
        elif choice == '2':
            lines = ['  13 1.000000e-02 # gS2 \n','  14 1.000000e+05 # LambdaSgam\n']
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  39 1.000000e-02 # gS2X \n','  14 1.000000e+05 # LambdaSgam\n']
    elif 'x2 > x1 j' in process or ('x2 > x1' in process and 'j /' in process):
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n','  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'u' in process and 'u~' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'c' in process and 'c~' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 't' in process and 't~' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'd' in process and 'd~' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n', '  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 's' in process and 's~' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'b' in process and 'b~' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'e-' in process  and 'e+' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n','  26 1.000000e+05 # LambdaXe\n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  26 1.000000e+05 # LambdaXe\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  26 1.000000e+05 # LambdaXe\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'mu-' in process  and 'mu+' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n','  27 1.000000e+05 # LambdaXmu\n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  27 1.000000e+05 # LambdaXmu\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  27 1.000000e+05 # LambdaXmu\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'ta-' in process  and 'ta+' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n','  28 1.000000e+05 # LambdaXta\n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  28 1.000000e+05 # LambdaXta\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  28 1.000000e+05 # LambdaXta\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    elif 'x2 >' in process and 'a' in process:
        if choice == '1':
            lines = ['  41 1.000000e-02 # gX12ZpV \n', '  42 0.000000e+00 # gX12ZpA \n','  19 1.000000e+05 # LambdaXgam\n']
        elif choice == '2':
            lines = ['  15 1.000000e-02 # gX2ZpV \n','  16 0.000000e+00 # gX2ZpA \n','  19 1.000000e+05 # LambdaXgam\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
        elif choice == '3':
            lines = ['  17 1.000000e-02 # gX3ZpV \n', '  18 0.000000e+00 # gX3ZpA \n','  38 1.000000e-02 # gS1X \n','  19 1.000000e+05 # LambdaXgam\n','  41 1.000000e-02 # gX12ZpV \n','  42 0.000000e+00 # gX12ZpA \n',]
    else:
        print 'ERROR: the process is not valid'
        sys.exit()
    return lines
